@page "/"
@using Plugin.BLE
@using Plugin.BLE.Abstractions
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.Exceptions
@using System.Text.Unicode
@using System.Text
@using System.Net
@using System.Timers

<h1>Curiosityへようこそ!</h1>

@if (Rover.IsConnected)
{
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Stop)">停止</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Forward)">前進</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Backward)">後退</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.TurnRight)">右回転</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.TurnLeft)">左回転</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Right)">右移動</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Left)">左移動</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Reset)">リセット</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Kill)">キル</button>
    <hr />
    <img src="@($"data:image/png;base64,{currentImageBase64}")" alt="Rover Camera" style="max-width: 100%; height: auto;" />
    <hr />
    <h3>ローバーの状態</h3>
    <p>稼働時間: @Rover.Data.Uptime 秒</p>
    <p>バッテリー残量: @Rover.Data.BatteryLevel %</p>
    <p>温度: @Rover.Data.Temperature °C</p>
    <p>気圧: @Rover.Data.Pressure hPa</p>
    <p>湿度: @Rover.Data.Humidity %</p>
    <p>距離: @Rover.Data.Distance mm</p>
}
else
{
    <p>ローバーに接続されていません。</p>
}

<p>@rawText</p>

@code {
    string bleState = "Unknown";
    string rawText = "No data received yet.";
    string currentImageBase64 = "";
    Timer timer;
    List<IDevice> deviceList = new List<IDevice>();
    IBluetoothLE ble = CrossBluetoothLE.Current;
    IAdapter adapter = CrossBluetoothLE.Current.Adapter;
    ICharacteristic? characteristic;
    Rover Rover = new Rover();
    HttpClient httpClient = new HttpClient();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Rover.StartConnect();
        try
        {
            var hub = await HubClient.ConnectAsync("http://192.168.12.116:8080/command");
            hub.CommandReceived += async (sender, command) =>
            {
                rawText = command.ToString();
                await Rover.SendCommandAsync(command);
            };
            await hub.ReceiveCommandAsync(Command.Stop);
            rawText = "Connection OK.";
        }
        catch (Exception ex)
        {
            rawText = $"Error: {ex.Message}";
        }
        var camera = new CameraService();
        camera.PhotoCaptured += async (sender, data) =>
        {
            using var form = new MultipartFormDataContent();
            using var streamContent = new StreamContent(new MemoryStream(data));
            
            // Content-Typeを設定（必要に応じて）
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/jpeg");
            
            // フォームデータとしてファイルを追加
            form.Add(streamContent, "file", "A.jpg");

            form.Add(new StringContent(Rover.Data.Id), "id");
            form.Add(new StringContent(Rover.Data.Uptime.ToString()), "uptime");
            form.Add(new StringContent(Rover.Data.BatteryLevel.ToString()), "batteryLevel");
            form.Add(new StringContent(Rover.Data.Temperature.ToString()), "temperature");
            form.Add(new StringContent(Rover.Data.Pressure.ToString()), "pressure");
            form.Add(new StringContent(Rover.Data.Humidity.ToString()), "humidity");
            form.Add(new StringContent(Rover.Data.Distance.ToString()), "distance");

            Console.WriteLine("画像を送信中...");
            
            // POST送信

            try
            {
                // 4. POSTリクエストを送信
                HttpResponseMessage response = await httpClient.PostAsync("http://192.168.12.116:8080/api/picture", form);

                // 5. レスポンスを確認
                if (response.IsSuccessStatusCode)
                {
                    string responseBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("ファイルアップロード成功！");
                    Console.WriteLine("サーバーからのレスポンス: " + responseBody);
                }
                else
                {
                    string errorBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"エラーが発生しました: {response.StatusCode}");
                    Console.WriteLine("エラー詳細: " + errorBody);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"予期せぬエラーが発生しました: {ex.Message}");
            }
            rawText = "Uploaded!!";
            StateHasChanged();
        };
        timer = new Timer(10000);
        timer.Elapsed += async (sender, e) =>
        {
            await camera.CapturePhotoAsync();
        };
        timer.Start();
        /*
        bleState = ble.State.ToString();
        ble.StateChanged += (s, e) =>
        {
        bleState = e.NewState.ToString();
        StateHasChanged();
        };
        adapter.DeviceDiscovered += (s, a) => deviceList.Add(a.Device);
        adapter.ScanTimeout = 10000;
        await adapter.StartScanningForDevicesAsync();
        */
    }
    private async Task OnScanButtonClicked()
    {
        deviceList.Clear();
        var scanFilterOptions = new ScanFilterOptions();
        scanFilterOptions.DeviceNames = new[] { "Curiosity" };
        await adapter.StartScanningForDevicesAsync(scanFilterOptions);
    }
    private async Task OnButtonClicked(byte command)
    {
        await characteristic.WriteAsync(new byte[] { command });
    }
    private async Task OnDeviceSelected(IDevice device)
    {
        try
        {
            await adapter.ConnectToDeviceAsync(device);
            var service = await device.GetServiceAsync(Guid.Parse("12345678-1234-5678-9012-123456789abc"));
            characteristic = await service.GetCharacteristicAsync(Guid.Parse("87654321-4321-8765-2109-cba987654321"));
        }
        catch (Exception e)
        {
            // ... could not connect to device
            rawText = $"Connection failed: {e.Message}";
        }
    }
}