@page "/"
@using Plugin.BLE
@using Plugin.BLE.Abstractions
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.Exceptions
@using System.Text.Unicode
@using System.Text

<h1>Curiosityへようこそ!</h1>

@if (Rover.IsConnected)
{
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Stop)">停止</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Forward)">前進</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Backward)">後退</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.TurnRight)">右回転</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.TurnLeft)">左回転</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Right)">右移動</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Left)">左移動</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Reset)">リセット</button>
    <button class="btn btn-secondary" @onclick="() => Rover.SendCommandAsync(Command.Kill)">キル</button>
    <hr />
    <h3>@Rover.Temperature</h3>
    <p>@Rover.Text</p>
}
else
{
    <p>デバイスに接続されていません。</p>
}

<p>@rawText</p>

@code {
    string bleState = "Unknown";
    string rawText = "No data received yet.";
    List<IDevice> deviceList = new List<IDevice>();
    IBluetoothLE ble = CrossBluetoothLE.Current;
    IAdapter adapter = CrossBluetoothLE.Current.Adapter;
    ICharacteristic? characteristic;
    Rover Rover = new Rover();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Rover.StartConnect();
        try
        {
            var hub = await HubClient.ConnectAsync("http://192.168.12.116:8080/command");
            hub.CommandReceived += async (sender, command) =>
            {
                rawText = command.ToString();
                await Rover.SendCommandAsync(command);
            };
        }
        catch (Exception ex)
        {
            rawText = $"Error: {ex.Message}";
        }
        /*
        bleState = ble.State.ToString();
        ble.StateChanged += (s, e) =>
        {
        bleState = e.NewState.ToString();
        StateHasChanged();
        };
        adapter.DeviceDiscovered += (s, a) => deviceList.Add(a.Device);
        adapter.ScanTimeout = 10000;
        await adapter.StartScanningForDevicesAsync();
        */
    }
    private async Task OnScanButtonClicked()
    {
        deviceList.Clear();
        var scanFilterOptions = new ScanFilterOptions();
        scanFilterOptions.DeviceNames = new[] { "Curiosity" };
        await adapter.StartScanningForDevicesAsync(scanFilterOptions);
    }
    private async Task OnButtonClicked(byte command)
    {
        await characteristic.WriteAsync(new byte[] { command });
    }
    private async Task OnDeviceSelected(IDevice device)
    {
        try
        {
            await adapter.ConnectToDeviceAsync(device);
            var service = await device.GetServiceAsync(Guid.Parse("12345678-1234-5678-9012-123456789abc"));
            characteristic = await service.GetCharacteristicAsync(Guid.Parse("87654321-4321-8765-2109-cba987654321"));
        }
        catch (Exception e)
        {
            // ... could not connect to device
            rawText = $"Connection failed: {e.Message}";
        }
    }
}