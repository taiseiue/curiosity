@page "/"
@using Plugin.BLE
@using Plugin.BLE.Abstractions
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.Exceptions
@using System.Text.Unicode
@using System.Text
@using System.Net
@using System.Timers

<h1>Curiosityへようこそ!</h1>

@if (Rover != null)
{
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.Stop)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">停止</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.Forward)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">前進</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.Backward)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">後退</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.TurnRight)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">右回転</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.TurnLeft)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">左回転</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.Right)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">右移動</button>
    <button class="btn btn-secondary" @onmousedown="() => Rover.Move(MotorDirection.Left)"
        @ontouchleave="() => Rover.Move(MotorDirection.Stop)">左移動</button>
    <button class="btn btn-secondary" @onclick="APITest">APIリクエスト</button>
    <hr />
    <img src="@($"data:image/png;base64,{currentImageBase64}")" alt="Rover Camera" style="max-width: 100%; height: auto;" />
    <hr />
    <h3>ローバーの状態</h3>
    <p>稼働時間: @Rover.Data.Uptime 秒</p>
    <p>バッテリー残量: @Rover.Data.BatteryLevel %</p>
    <p>温度: @Rover.Data.Temperature °C</p>
    <p>気圧: @Rover.Data.Pressure hPa</p>
    <p>湿度: @Rover.Data.Humidity %</p>
    <p>距離: @Rover.Data.Distance mm</p>
}
else
{
    <p>ローバーに接続されていません。</p>
}

<p>@rawText</p>

@code {
    string bleState = "Unknown";
    string rawText = "No data received yet.";
    string currentImageBase64 = "";
    Timer timer;
    Rover Rover = new Rover();
    APIClient apiClient = new APIClient("http://192.168.12.116:8080");
    CameraService camera;
    private async Task APITest()
    {
        await camera.CapturePhotoAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        camera = new CameraService();
        camera.PhotoCaptured += async (sender, data) =>
        {
            try
            {
                var result = await apiClient.PostData(Rover.Data, data);
                rawText = $"HTTP {result.StatusCode}: {await result.Content.ReadAsStringAsync()}";
            }
            catch (Exception ex)
            {
                rawText = $"Error: {ex.Message}";
            }
            StateHasChanged();
        };
        await Rover.StartConnect();
        try
        {
            HubClient hub = await HubClient.ConnectAsync("https://rover-hub.taiseiue.jp/command");
            hub.DirectionReceived += async (sender, direction) =>
            {
                rawText = direction.ToString();
                await Rover.Move(direction);
            };
            await hub.SetDirectionAsync(MotorDirection.Stop);
            rawText = "Connection OK.";
        }
        catch (Exception ex)
        {
            rawText = $"Error: {ex.Message}";
        }

        timer = new Timer(10000);
        timer.Elapsed += async (sender, e) =>
        {
            await camera.CapturePhotoAsync();
        };
        timer.Start();
    }
}