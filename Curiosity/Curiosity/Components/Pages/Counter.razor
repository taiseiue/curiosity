@page "/counter"

<h1>位置情報</h1>

<p>@locationText</p>

<button class="btn btn-primary" @onclick="OnScanButtonClicked">@scanButtonText</button>

@code {
    private string locationText = "Unknown";
    private string scanButtonText = "位置情報を取得";
    private CancellationTokenSource _cancelTokenSource;
    private bool _isCheckingLocation;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Geolocation.LocationChanged += Geolocation_LocationChanged;
            // Using GeolocationAccuracy.Medium as a balance between accuracy and power consumption.
            // Developers can adjust this value to High or Low based on their specific requirements.
            var request = new GeolocationListeningRequest(GeolocationAccuracy.Best, TimeSpan.FromSeconds(3));
            var success = await Geolocation.StartListeningForegroundAsync(request);

            string status = success
            ? "Started listening for foreground location updates"
            : "Couldn't start listening";
        }
        catch (Exception ex)
        {
            // Unable to start listening for location changes
        }
    }

    async Task OnScanButtonClicked()
    {
        try
        {
            _isCheckingLocation = true;

            GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Medium, TimeSpan.FromSeconds(10));

            _cancelTokenSource = new CancellationTokenSource();
            scanButtonText = "位置情報を取得中...";
            StateHasChanged();
            Location location = await Geolocation.Default.GetLocationAsync(request, _cancelTokenSource.Token);

            if (location != null)
                locationText = $"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}";
            scanButtonText = "位置情報を取得";
        }
        // Catch one of the following exceptions:
        // FeatureNotSupportedException
        // FeatureNotEnabledException
        // PermissionException
        catch (Exception ex)
        {
            // Unable to get location
        }
        finally
        {
            _isCheckingLocation = false;
        }
    }
    void Geolocation_LocationChanged(object sender, GeolocationLocationChangedEventArgs e)
    {
        if (e.Location != null)
            locationText = $"Latitude: {e.Location.Latitude}, Longitude: {e.Location.Longitude}, Altitude: {e.Location.Altitude}";
        TimeSpan vibrationLength = TimeSpan.FromSeconds(1);
        Vibration.Default.Vibrate(vibrationLength);
        StateHasChanged();
    }
}
